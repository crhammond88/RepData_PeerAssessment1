plot(u)
str(USArrests)
head(USArrests)
plot(USArrests$Murder)
qplot(UrbanPop, Murder, data = USArrests)
qplot(UrbanPop, Murder, data = USArrests, geom = c("point", "smooth"), method = "lm")
qplot(Murder, data = USArrests)
qplot(UrbanPop, Murder, data = USArrests, color = row)
qplot(UrbanPop, Murder, data = USArrests)
qplot(Assault, Murder, data = USArrests, geom = c("point", "smooth"), method = "lm")
qplot(Rape, Murder, data = USArrests, geom = c("point", "smooth"), method = "lm")
plot(USArrests$Murder)
barplot(USArrests$Murder)
str(Loblolly)
l <- Loblolly
qplot(heigh, age, data = l)
qplot(height, age, data = l)
qplot(height, Seed, data = l)
str(Nile)
plot(Nile)
str(InsepctSprays)
str(InsectSprays)
plot(count, spray)
qplot(count, spray, data = InsectSprays)
str(volcano)
plot(volcano)
?volcano
plot(volcano, filled.countor)
plot(volcano, filled.contour)
filled.contour(volcano)
str(rivers)
head(rivers)
?rivers
mean(rivers)
summary(rivers)
str(espoh)
str(esoph)
?esoph
qplot(agegp, ncases, data = espoh)
qplot(agegp, ncases, data = esoph)
qplot(tobgp, ncases, data = esoph)
qplot(tobgp, ncases, data = esoph, geom = c("point", "smooth"), method = "lm")
qplot(alcgp, ncases, data = esoph)
qplot(alcgp, tobgp, data = esoph)
str(islands)
head(islands)
summary(islands)
plot(islands)
str(morley)
plot(morley)
qplot(Run, Speed, data = morley)
?morley
qplot(Expt, Speed, data = morley)
str(WWWusage)
plot(WWWusage)
?WWWusage
require(graphics)
work <- diff(WWWusage)
par(mfrow = c(2, 1)); plot(WWWusage); plot(work)
?diff
x = rnorm(100)
hist(x, freq = FALSE)
lines(density(x))
density(x)
library(swirl)
install_from_swirl("Open Intro")
swirl()
install_from_swirl("Mathematical Biostatistics Boot Camp")
install_from_swirl("Data Analysis")
library(swirl)
swirl()
nxt()
cars
cars$mpgCity
mpMPG <- cars$mpgCity
mean(myMPG)
median(myMPG)
table(myMPG)
19
range(cars$price)
61.9-7.4
car(cars$price)
var(cars$price)
sd(cars$price)
nxt()
18
12
25
4
summary(cars$price)
x <- 1:100
y <- rnorm(100, 5)
plot(y ~ x)
line(y ~ x)
lm(y ~ x)
x <- matrix(1:100, 5, 20)
y <- matrix(rnorm(100, 5), 5, 20)
plot(y ~ x)
x
line(y ~ x)
?line
line(x,y)
z <- line(y~z)
z <- line(y~x)
lines(z)
lines(x,y)
l <- lm(y ~ x)
l
plot(l)
lines(l)
confint(l)
?lines
library(ggplot2)
qplot(x, y, y~x)
qplot(x, y)
data <- data.frame(x,y)
qplot(x, y, data = data, geom = c("point", "smooth"), method = "lm")
str(x)
x <- 1:100
y <- rnorm(100, 4)
data <- data.frame(x,y)
qplot(x, y, data = data, geom = c("point", "smooth"), method = "lm")
qplot(x, y, data = data, geom = c("point", "smooth"))
sort(y)
sort(y, decr = true)
sort(y, decr = TRUE)
?xtabs
library(datasets)
warpbreaks$replicate <- rep(1:9, len = 54)
xt = xtabs(breaks ~ ., data=warpbreaks)
xt
ftable(xt)
fakeData = rnorm(1e6)
print(object.size(fakeData, units = ))
print(object.size(fakeData, units = "Mb"))
print(object.size(fakeData), units = "Mb")
summary(fakeData)
str(faleData)
str(fakeData)
x <- rnorm(100, 5)
y <- rbinom(100, 0.5)
y <- rbinom(100, 2, 0.5)
dat <- data.frame(x,y)
dat$z <- rpois(100,3)
head(dat)
table(x,y)
table(z)
table(y)
install.packages(Hmisc)
install.packages("Hmisc")
yesno <- sample(c("yes", "no"), size = 100, replace = TRUE)
yesnofac <- factor(yesno, levels = c("yes, "no))
yesnofac <- factor(yesno, levels = c("yes, "no"))
yesnofac = factor(yesno, levels=c("yes","no"))
relevel(yesnofac, ref ="Yes")
relevel(yesnofac, ref ="yes")
as.numeric(yesnofac)
library(Hmisc)
library(plyr)
restData2 = mutate(restdata, zipGroups = cut2(zipCode, g=4))
colors()
plot(colors())
hist(colors())
library(ggplot2)
qplot(colors())
install.packages(RColorBrewer)
install.packages("RColorBrewer")
library(RColorBrewer)
?RColorBrewer
cols <- brewer.pal(4, "BuGn")
cols
library(datasets)
pal <- colorRampPalette(cols)
image(volcano, col = pal(20))
x <- rnorm(10000,3)
y <- rnorm(10000,6)
smoothScatter(x,y)
?smoothScatter
smoothScatter(x,y, colramp = pal(20))
smoothScatter(x,y, colramp = colorRampPalette(cols))
plot(x,y pch = 19)
plot(x,yn pch = 19)
plot(x,ym pch = 19)
plot(x,y, pch = 19)
plot(x,y, pch = 19, col = rgb(0,0,0,0.3))
plot(x,y, pch = 19, col = rgb(0,0,0,0.1))
?glm
date()
weekdays(date(0))
weekdays(date())
class(date())
time()
d1 = date()
d2 = Sys.Date()
class(date)
as.Date(d1)
weekdays(d2)
library(lubridate)
d1
Sys.timezone
Sys.timezone()
wday(d2)
wday(d2, label = T)
wday(d2, label = T)
install.package("RGoogleMaps")
install.packages("RGoogleMaps")
install.packages("RgoogleMaps")
?RgoogleMaps
??RgoogleMaps
x <- rnorm(100, 5)
ColorMap(x)
?ColorMap
library(RgoogleMaps)
?RgoogleMaps
?ColorMap
ColorMap(x)
?mao
?mao
?map
b <- bubbleMap(x)
y<- rnorm(100,8)
dat <- cbind(x,y)
b <- bubbleMap(dat)
m <- GetMap()
m <- GetMap("testMap")
m <- GetMap("testMap", zoom = T)
m
c <- ColorMap(x, m)
c
if (interactive()){
data("NYleukemia", envir = environment())
population <- NYleukemia$data$population
cases <- NYleukemia$data$cases
mapNY <- GetMap(center=c(lat=42.67456,lon=-76.00365), destfile = "NYstate.png",
maptype = "mobile", zoom=9)
ColorMap(100*cases/population, mapNY, NYleukemia$spatial.polygon, add = FALSE,
alpha = 0.35, log = TRUE, location = "topleft")
}
#ColorMap(100*cases/population, map=NULL, NYleukemia$spatial.polygon)
install.packages("sp")
if (interactive()){
data("NYleukemia", envir = environment())
population <- NYleukemia$data$population
cases <- NYleukemia$data$cases
mapNY <- GetMap(center=c(lat=42.67456,lon=-76.00365), destfile = "NYstate.png",
maptype = "mobile", zoom=9)
ColorMap(100*cases/population, mapNY, NYleukemia$spatial.polygon, add = FALSE,
alpha = 0.35, log = TRUE, location = "topleft")
}
#ColorMap(100*cases/population, map=NULL, NYleukemia$spatial.polygon)
version
plot(rnorm(100,5),rnorm(100,4))
?readRDS
?textConnection
?make.names
log10(-19)
install.packages("googleVis")
/S{5}
?exrp
?expr
?expression
expression(/S{5})
expression("/S{5}
")
install.packages("xtable")
setwd("D:/Data Sets/RR-repdata")
setwd("D:/")
setwd("D:/DataSets/RR-Project1/RepData_PeerAssessment1")
setwd("D:/DataSets/RR-Project1/RepData_PeerAssessment1")
;s
ls
ls()
pwd()
dat <- unzip("activity.zip")
data <- read.csv(dat)
str(data)
hist(data$steps)
table(data$steps, data$date)
table(sum(data$steps), data$date)
lapply(data$steps, sum)
?aggregate
aggregate(data$steps, data$date, sum)
aggregate(data$steps, as.list(data$date), sum)
str(data)
aggregate(data$steps, by=list(data$date), FUN=sum)
dailySteps <- aggregate(data$steps, by=list(data$date), FUN=sum)
str(dailySteps)
hist(dailySteps)
hist(dailySteps[2])
hist(dailySteps[,2])
meanSteps <- mean(dailySteps[,2])
medianSteps <- median(dailySteps[,2])
meanSteps
meanSteps <- mean(dailySteps[,2], na.rm = TRUE)
medianSteps <- median(dailySteps[,2], na.rm = TRUE)
meanSteps
medianSteps
hist(dailySteps[,2], main = "Histogram of Total Daily Steps", xlab = "Total Daily Steps")
plot(data$interval, dailySteps)
interval <- data$interval
str(interval)
as.factor(interval)
str(as.factor(interval))
plot(as.factor(interval), dailySteps)
plot(as.factor(interval), dailySteps, type = "l")
length(dailySteps)
plot(as.factor(interval), dailySteps[,2], type = "l")
str(dailySteps)
plot(as.factor(interval), data$steps, type = "l")
aggregate(data$steps, by=list(data$date), FUN=mean)
averageSteps <- aggregate(data$steps, by=list(data$date), FUN=mean)
library(ggplot2)
qplot(interval, steps, data=data, geom="line")
total.steps <- tapply(data$steps, data$date, FUN=sum, na.rm=TRUE)
qplot(total.steps, binwidth=1000, xlab="total number of steps taken each day")
hist(dailySteps[,2], main = "Histogram of Total Daily Steps", xlab = "Total Daily Steps")
total.steps <- tapply(data$steps, data$date, FUN=sum, na.rm=TRUE)
qplot(total.steps, binwidth=1000, xlab="total number of steps taken each day")
total.steps
dailySteps
averageSteps <- aggregate(data$steps, by=list(data$interval), FUN=mean)
averageSteps
averageSteps <- aggregate(data$steps, by=list(data$interval), FUN=mean, na.rm = TRUE)
averageSteps
with(averageSteps, plot(interval, steps, type ="l"))
plot(averageSteps[,1], averageSteps[,2], type ="l")
plot(averageSteps[,1], averageSteps[,2], type="l")
plot(averageSteps[,1], averageSteps[,2], type="l", xlab="Time", ylab="Average Steps Taken", main="Average Steps Taken by Time")
maxSteps <- averageSteps[max(averageSteps[,2]),1]
maxSte[s]
maxSteps
averageSteps[2,1]
max(averageSteps[,2])
averageSteps[which(averageSteps[,2] == max(averageSteps[,2])),]
averageSteps[which(averageSteps[,2] == max(averageSteps[,2])),1]
maxStepInterval <- averageSteps[which(averageSteps[,2] == max(averageSteps[,2])),1]
maxStepInterval
maxStepInterval <- averageSteps[which(averageSteps[,2] == max(averageSteps[,2])),]
maxStepInterval
?which.max
averageSteps[which.max(averageSteps[,2]),1]
mean(is.na(data))
sum(is.na(data))
which(is.na(data))
?which
which(is.na(data), arr.ind=TRUE)
?Hmisc
library(Hmisc)
?Hmisc
?impute
?merge
?impute
?merge
str(data)
str(averageSteps)
myData <- merge(data, averageSteps, by.x="interval",by.y="interval")
names(averageSteps) <- c("interval","avgsteps")
myData <- merge(data, averageSteps, by.x="interval",by.y="interval")
str(myData)
head(myData)
tail(myData)
myData[56:67,]
myData[1156:1167,]
myData[11156:11167,]
myData[is.na(myData),"steps"] <- myData[is.na(myData), "avgsteps"]
is.na(myData)
myData[is.na(myData),"steps"]
myData[is.na(myData), "avgsteps"]
?is.na
is.na(myData)
is.na(myData)[,"steps"]
myData[is.na(myData)[,"steps"]]
myData[is.na(myData)[,"steps"],]
head(myData[is.na(myData)[,"steps"],])
myData[is.na(myData)[,"steps"]] <- myData[is.na(myData)[,"avgsteps"]]
myData[is.na(myData)[,"steps"],] <- myData[is.na(myData)[,"avgsteps"],]
myData[is.na(myData)[,"avgsteps"],]
myData[is.na(myData)[,"steps"],]
myData[is.na(myData)[,"steps"],][,"steps"]
myData[is.na(myData)[,"steps"],][,"avgsteps"]
myData[is.na(myData)[,"steps"],][,"steps"] <- myData[is.na(myData)[,"steps"],][,"avgsteps"]
head(myData)
is.na(myData)
sum(is.na(myData))
myData <- data
sum(is.na(myData))
myData[missingValues,"steps"]
missingValues <- is.na(myData)[,"steps"]
myData[missingValues,"steps"]
myData[missingValues,"steps"] <- myData[missingValues,"avgsteps"]
myData[missingValues,"avgsteps"]
myData[missingValues,]
head(myData[missingValues,])
myData <- merge(data, averageSteps, by.x="interval",by.y="interval")
head(myData)
myData[missingValues,"steps"] <- myData[missingValues,"avgsteps"]
sum(is.na(myData))
head(myData)
myData <- data
head(myData)
myData <- merge(data, averageSteps, by.x="interval",by.y="interval")
View(data)
?clear
rawData <- unzip("activity.zip")
data <- read.csv(rawData)
head(data)
sum(is.na(data))
averageSteps <- aggregate(data$steps, by=list(data$interval), FUN=mean, na.rm = TRUE)
names(averageSteps) <- c("interval","avgsteps")
myData <- merge(data, averageSteps, by.x="interval",by.y="interval")
head(myData)
sum(is.na(myData))
missingValues <- is.na(myData)[,"steps"]
head(missingValues)
myData[missingValues,"steps"]
myData[missingValues,"avgsteps"]
myData[missingValues,"steps"] <- myData[missingValues,"avgsteps"]
head(myData)
sum(is.na(myData))
myData <- myData[,c("interval","steps","date")]
head(myData)
dailySteps1 <- aggregate(myData$steps, by=list(myData$date), FUN=sum)
hist(dailySteps1[,2], main = "Histogram of Total Daily Steps", xlab = "Total Daily Steps")
mean(dailySteps1[,2], na.rm=TRUE)
median(dailySteps1[,2], na.rm=TRUE)
mean(dailySteps[,2], na.rm=TRUE)
median(dailySteps[,2], na.rm=TRUE)
dailySteps <- aggregate(data$steps, by=list(data$date), FUN=sum)
mean(dailySteps[,2], na.rm=TRUE)
median(dailySteps[,2], na.rm=TRUE)
mean(dailySteps1[,2])
median(dailySteps1[,2])
mean(dailySteps[,2], na.rm=TRUE)
dailySteps
str(dailySteps)
mean(dailySteps[,2], na.rm=TRUE)
median(dailySteps[,2], na.rm=TRUE)
head(dailySteps)
sum(is.na(dailySteps))
hist(dailySteps[,2], main = "Histogram of Total Daily Steps", xlab = "Total Daily Steps")
hist(dailySteps1[,2], main = "Histogram of Total Daily Steps", xlab = "Total Daily Steps")
mean(dailySteps[,2])
hist(dailySteps[,2], main = "Histogram of Total Daily Steps", xlab = "Total Daily Steps")
hist(dailySteps1[,2], main = "Histogram of Total Daily Steps", xlab = "Total Daily Steps")
hist(dailySteps[,2], main = "Histogram of Total Daily Steps", xlab = "Total Daily Steps")
hist(dailySteps1[,2], main = "Histogram of Total Daily Steps", xlab = "Total Daily Steps")
hist(dailySteps[,2], main = "Histogram of Total Daily Steps", xlab = "Total Daily Steps")
hist(dailySteps1[,2], main = "Histogram of Total Daily Steps", xlab = "Total Daily Steps")
total.steps <- tapply(activity$steps, activity$date, sum, na.rm = TRUE)
total.steps <- tapply(data$steps, data$date, sum, na.rm = TRUE)
mean(total.steps)
head(total.steps)
head(dailySteps)
myData[,"daytype"] <- "weekday"
head(myData)
myData[which(weekdays(myData[,"date"]) == c("Saturday", "Sunday")), "daytype"] = "weekend"
as.Date(myData[,"date"])
myData[which(weekdays(myData[,"date"]) == c("Saturday", "Sunday")), "daytype"] = "weekend"
myData[which(weekdays(as.Date(myData[,"date"]) == c("Saturday", "Sunday")), "daytype"] = "weekend"
myData[which(weekdays(as.Date(myData[,"date"])) == c("Saturday", "Sunday")), "daytype"] = "weekend"
head(myData)
clasS(myData$daytype)
class(myData$daytype)
myData[,"daytype"] <- as.factor("weekday")
class(myData$daytype)
myData[which(weekdays(as.Date(myData[,"date"])) == c("Saturday", "Sunday")), "daytype"] = "weekend"
myData[,"daytype"] <- "weekday"
myData[which(weekdays(as.Date(myData[,"date"])) == c("Saturday", "Sunday")), "daytype"] = "weekend"
myData[,"daytype"] <- as.factor(myData[,"daytype"])
class(myData$daytype)
head(myData)
averages <- aggregate(steps ~ interval + day, data = myData, mean)
averages <- aggregate(steps ~ interval + daytype, data = myData, mean)
averages
?aggregae
?aggregate
library(lattice)
?lattice
?xyplot
?plot
par(mfrow = c(2,1))
?xyplot
xyplot(steps ~ interval + daytype, data=myData, mean)
xyplot(steps ~ interval + daytype, data=myData)
library(ggplot2)
?qplot
qplot(steps ~ interval + daytype, data=myData)
?aggregate
averageSteps <- aggregate(data$steps, by=list(data$interval), FUN=mean, na.rm = TRUE)
averageSplit <- aggregate(myData$steps, by=list(myData$interval, myData$daytype), FUN=mean)
averageSplit
?qplot
qplot(interval, steps, data=myData, facets=daytype ~ ., geom="line")
averages <- aggregate(steps ~ interval + daytype, data = myData, mean)
ggplot(averages, aes(interval, steps)) + geom_line() + facet_grid(day ~ .) +
xlab("5-minute interval") + ylab("Number of steps")
ggplot(averages, aes(interval, steps)) + geom_line() + facet_grid(daytype ~ .) +
xlab("5-minute interval") + ylab("Number of steps")
qplot(interval, steps, data=averageSplit, facets=daytype ~ ., geom="line")
head(averageSplit)
names(averageSplit) <- c("interval","daytype","steps")
head(averageSplit)
qplot(interval, steps, data=averageSplit, facets=daytype ~ ., geom="line")
qplot(interval, steps, data=averageSplit, facets=daytype ~ ., geom="line", xlab="Time", ylab="Average Steps Taken", main="Average Steps Taken by Time")
qplot(interval, steps, data=averageSplit, facets=daytype ~ ., geom="line", xlab="Time", ylab="Average Steps Taken", main="Average Steps Taken by Time for Weekdays and Weekends")
?knit2html
library(knitr)
?knit2html
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
